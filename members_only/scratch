export const usersCreatePost = [
    updateUserValidation, asyncHandler(async (req,res) =>{
        const errors = validationResult(req);
        const { updateUserEmail, updateUserUsername, updateUserFirstName, updateUserLastName, updateUserPassword, updateUserMembershipCode } = req.body;
        const hashedPassword = await bcrypt.hash(updateUserPassword, 10);
        console.log(req.body);
        if (!errors.isEmpty()) {
            return res.render("updateUser", {
                title: "Create user",
                user: req.user,
                memberAuthenticatedLinks,
                guestAuthenticatedLinks,
                adminAuthenticatedLinks,
                errors: errors.array()
            });
        }
        if(updateUserUsername !== "") {
            await db.updateUser(updateUserFirstName, updateUserLastName, updateUserUsername, updateUserEmail, hashedPassword);
        } else {
            const extractedUsername = updateUserEmail.split('@')[0];
            await db.updateUser(updateUserFirstName, updateUserLastName, updateUserUsername, updateUserEmail, hashedPassword);
        }
        const updatedUser = await db.retrieveNewlyCreatedUser(updateUserEmail);
        
        await db.addMembershipToCreatedUser(updatedUser.id, parseInt(updateUserMembershipCode));
        
        res.redirect("/users");
    })
];
